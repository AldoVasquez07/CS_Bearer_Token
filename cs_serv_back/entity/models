from conexion.conexion import obtener_cursor


class Productos:
    @staticmethod
    def obtener_cursor():
        """ Establece la conexión y devuelve un cursor. """
        from leer_configuracion import leer_configuracion  # Asegúrate de que esta función está en un módulo accesible
        config = leer_configuracion()
        if config:
            try:
                conn = psycopg2.connect(**config)
                return conn.cursor(), conn
            except Exception as e:
                print(f"Error al conectar a PostgreSQL: {e}")
        return None, None

    @staticmethod
    def get_producto(id):
        """ Obtiene un producto por ID si su estado es True. """
        cursor, conn = Productos.obtener_cursor()
        if cursor and conn:
            try:
                cursor.execute("SELECT * FROM producto WHERE id = %s AND estado = TRUE;", (id,))
                producto = cursor.fetchone()
                return producto
            except Exception as e:
                print(f"Error al obtener el producto: {e}")
            finally:
                cursor.close()
                conn.close()
        return None

    @staticmethod
    def get_productos():
        """ Obtiene todos los productos con estado True. """
        cursor, conn = Productos.obtener_cursor()
        if cursor and conn:
            try:
                cursor.execute("SELECT * FROM producto WHERE estado = TRUE;")
                productos = cursor.fetchall()
                return productos
            except Exception as e:
                print(f"Error al obtener los productos: {e}")
            finally:
                cursor.close()
                conn.close()
        return []

    @staticmethod
    def delete_producto(id):
        """ Desactiva un producto (cambia estado a False en lugar de eliminarlo). """
        cursor, conn = Productos.obtener_cursor()
        if cursor and conn:
            try:
                cursor.execute("UPDATE producto SET estado = FALSE WHERE id = %s;", (id,))
                conn.commit()
                return True
            except Exception as e:
                print(f"Error al eliminar el producto: {e}")
            finally:
                cursor.close()
                conn.close()
        return False

    @staticmethod
    def insert_producto(nombre, descripcion, precio, stock):
        """ Inserta un nuevo producto con estado True. """
        cursor, conn = Productos.obtener_cursor()
        if cursor and conn:
            try:
                cursor.execute("""
                    INSERT INTO producto (nombre, descripcion, precio, stock, estado)
                    VALUES (%s, %s, %s, %s, TRUE)
                    RETURNING id;
                """, (nombre, descripcion, precio, stock))
                nuevo_id = cursor.fetchone()[0]
                conn.commit()
                return nuevo_id
            except Exception as e:
                print(f"Error al insertar el producto: {e}")
            finally:
                cursor.close()
                conn.close()
        return None
